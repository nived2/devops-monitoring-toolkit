image: golang:1.19

variables:
  DOCKER_REGISTRY: registry.gitlab.com
  DOCKER_IMAGE: $CI_REGISTRY_IMAGE
  DOCKER_TAG: $CI_COMMIT_REF_SLUG

stages:
  - test
  - build
  - deploy
  - docs

# Cache Go dependencies
cache:
  paths:
    - .cache

before_script:
  - mkdir -p .cache
  - export GOPATH="$CI_PROJECT_DIR/.cache"

test:
  stage: test
  script:
    - go mod download
    - go test ./... -v -cover
  coverage: '/coverage: \d+.\d+% of statements/'

lint:
  stage: test
  script:
    - go install golang.org/x/lint/golint@latest
    - golint -set_exit_status ./...

build:
  stage: build
  script:
    - go build -o app
  artifacts:
    paths:
      - app

docker-build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $DOCKER_IMAGE:$DOCKER_TAG .
    - docker push $DOCKER_IMAGE:$DOCKER_TAG
  only:
    - main
    - tags

pages:
  stage: docs
  script:
    - mkdir public
    - cp -r docs/* public/
  artifacts:
    paths:
      - public
  only:
    - main

deploy-staging:
  stage: deploy
  script:
    - echo "Deploy to staging server"
  environment:
    name: staging
  only:
    - main

deploy-production:
  stage: deploy
  script:
    - echo "Deploy to production server"
  environment:
    name: production
  only:
    - tags
  when: manual

include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Container-Scanning.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml
